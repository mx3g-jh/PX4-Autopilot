############################################################################
#
#   Copyright (c) 2015-2023 PX4 Development Team. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name PX4 nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#############################################################################

set(EKF_DERIVATION_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/EKF/ekf_derivation)

set(EKF_GENERATED_FILES ${EKF_DERIVATION_SRC_DIR}/state.h)
set(EKF_GENERATED_DERIVATION_INCLUDE_PATH "${EKF_DERIVATION_SRC_DIR}/..")

set(EKF_LIBS)
set(EKF_SRCS)
list(APPEND EKF_SRCS
	EKF/control.cpp
	EKF/covariance.cpp
	EKF/ekf.cpp
	EKF/ekf_helper.cpp
	EKF/estimator_interface.cpp
	EKF/height_control.cpp
	EKF/velocity_fusion.cpp
	EKF/position_fusion.cpp
	EKF/yaw_fusion.cpp

	EKF/imu_down_sampler/imu_down_sampler.cpp

	EKF/aid_sources/fake_height_control.cpp
	EKF/aid_sources/fake_pos_control.cpp
	EKF/aid_sources/ZeroGyroUpdate.cpp
	EKF/aid_sources/ZeroVelocityUpdate.cpp
	EKF/aid_sources/zero_innovation_heading_update.cpp
)

if(CONFIG_EKF2_AIRSPEED)
	list(APPEND EKF_SRCS EKF/aid_sources/airspeed/airspeed_fusion.cpp)
endif()

if(CONFIG_EKF2_AUX_GLOBAL_POSITION)
	list(APPEND EKF_SRCS EKF/aid_sources/aux_global_position/aux_global_position.cpp)
endif()

if(CONFIG_EKF2_AUXVEL)
	list(APPEND EKF_SRCS EKF/aid_sources/auxvel/auxvel_fusion.cpp)
endif()

if(CONFIG_EKF2_BAROMETER)
	list(APPEND EKF_SRCS EKF/aid_sources/barometer/baro_height_control.cpp)
endif()

if(CONFIG_EKF2_DRAG_FUSION)
	list(APPEND EKF_SRCS EKF/aid_sources/drag/drag_fusion.cpp)
endif()

if(CONFIG_EKF2_EXTERNAL_VISION)
	list(APPEND EKF_SRCS
		EKF/aid_sources/external_vision/ev_control.cpp
		EKF/aid_sources/external_vision/ev_height_control.cpp
		EKF/aid_sources/external_vision/ev_pos_control.cpp
		EKF/aid_sources/external_vision/ev_vel_control.cpp
		EKF/aid_sources/external_vision/ev_yaw_control.cpp
	)
endif()

if(CONFIG_EKF2_GNSS)
	list(APPEND EKF_SRCS
		EKF/aid_sources/gnss/gnss_height_control.cpp
		EKF/aid_sources/gnss/gps_checks.cpp
		EKF/aid_sources/gnss/gps_control.cpp
	)

	if(CONFIG_EKF2_GNSS_YAW)
		list(APPEND EKF_SRCS EKF/aid_sources/gnss/gnss_yaw_control.cpp)
	endif()

	list(APPEND EKF_LIBS m_yaw_estimator)

endif()

if(CONFIG_EKF2_GRAVITY_FUSION)
	list(APPEND EKF_SRCS EKF/aid_sources/gravity/gravity_fusion.cpp)
endif()

if(CONFIG_EKF2_MAGNETOMETER)
	list(APPEND EKF_SRCS
		EKF/aid_sources/magnetometer/mag_control.cpp
		EKF/aid_sources/magnetometer/mag_fusion.cpp
	)
endif()

if(CONFIG_EKF2_OPTICAL_FLOW)
	list(APPEND EKF_SRCS
		EKF/aid_sources/optical_flow/optical_flow_control.cpp
		EKF/aid_sources/optical_flow/optical_flow_fusion.cpp
	)
endif()

if(CONFIG_EKF2_RANGE_FINDER)
	list(APPEND EKF_SRCS
		EKF/aid_sources/range_finder/range_finder_consistency_check.cpp
		EKF/aid_sources/range_finder/range_height_control.cpp
		EKF/aid_sources/range_finder/range_height_fusion.cpp
		EKF/aid_sources/range_finder/sensor_range_finder.cpp
	)
endif()

if(CONFIG_EKF2_SIDESLIP)
	list(APPEND EKF_SRCS EKF/aid_sources/sideslip/sideslip_fusion.cpp)
endif()

if(CONFIG_EKF2_TERRAIN)
	list(APPEND EKF_SRCS EKF/terrain_control.cpp)
endif()

if(CONFIG_EKF2_WIND)
	list(APPEND EKF_SRCS EKF/wind.cpp)
endif ()

add_subdirectory(EKF)

px4_add_module(
	MODULE modules__m_ekf2
	MAIN m_ekf2
	COMPILE_FLAGS
		${MAX_CUSTOM_OPT_LEVEL}
		-fno-associative-math
		#-DDEBUG_BUILD
		#-O0
	INCLUDES
		EKF
		EKF/aid_sources
		${EKF_GENERATED_DERIVATION_INCLUDE_PATH}
	PRIORITY
		"SCHED_PRIORITY_MAX - 18" # max priority below high priority WQ threads
	STACK_MAX
		3600
	SRCS
		${EKF_SRCS}

		M_EKF2.cpp
		M_EKF2.hpp
		M_EKF2Selector.cpp
		M_EKF2Selector.hpp

		${EKF_GENERATED_FILES}

	DEPENDS
		geo
		hysteresis
		perf
		px4_work_queue
		world_magnetic_model

		${EKF_LIBS}
		m_bias_estimator
		m_output_predictor
	)

